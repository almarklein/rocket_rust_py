""" Run the rocket game on Qt.
"""

import time
import math

from qtpy import QtWidgets, QtCore, QtGui
from qtpy.QtCore import QRectF

from rocket import BaseRocketGame

REL_SIZE = 2.5


class QtRocketGame(BaseRocketGame, QtWidgets.QWidget):
    """ Rocket game with Qt providing a drawing canvas and user input.
    """
    
    def __init__(self):
        if not hasattr(QtWidgets, '_app'):
            QtWidgets._app = QtWidgets.QApplication([])
        QtWidgets.QWidget.__init__(self, None)
        BaseRocketGame.__init__(self)
        self.setWindowTitle("Rocket, written in Rust, compiled to WASM, running in Python, with Qt")
        self.resize(900, 700)
        
        self._lasttime = time.time()
        self._highscore = 0
    
    def run(self):
        self.show()
        QtWidgets.qApp.exec_()
    
    def paintEvent(self, event):
        self._painter = QtGui.QPainter()
        self._painter.begin(self)
        self._painter.setRenderHint(QtGui.QPainter.Antialiasing)
        
        progress = time.time() - self._lasttime
        self._lasttime = time.time()
        self.game.exports.update(progress)
        self.game.exports.draw()
        
        self._painter.end()
        self.update()  # Request a new paint event
    
    ## Events going into the WASM module
    
    def resizeEvent(self, event):
        self.game.exports.resize(self.width(), self.height())
    
    def keyPressEvent(self, event):
        self._toggleKey(event, True)
    
    def keyReleaseEvent(self, event):
        self._toggleKey(event, False)
    
    def _toggleKey(self, event, b):
        if event.key() == QtCore.Qt.Key_Space:
            self.game.exports.toggle_shoot(b)
        elif event.key() == QtCore.Qt.Key_Left:
            self.game.exports.toggle_turn_left(b)
        elif event.key() == QtCore.Qt.Key_Right:
            self.game.exports.toggle_turn_right(b)
        elif event.key() == QtCore.Qt.Key_Up:
            self.game.exports.toggle_boost(b)
    
    ## Events generated by WASM module
    
    def wasm_clear_screen(self) -> None:  # [] -> []
        pass  # not needed, we start with a blanc canvas each iteration
    
    def wasm_draw_bullet(self, x: float, y: float) -> None:  # [(0, 'f64'), (1, 'f64')] -> []
        self._painter.setBrush(QtGui.QColor('#0f0'))
        rect = QRectF(x, y, REL_SIZE*3, REL_SIZE*3)
        self._painter.drawEllipse(rect)
    
    def wasm_draw_enemy(self, x: float, y: float) -> None:  # [(0, 'f64'), (1, 'f64')] -> []
        self._painter.setBrush(QtGui.QColor('#ff0'))
        rect = QRectF(x, y, REL_SIZE*14, REL_SIZE*14)
        self._painter.drawEllipse(rect)
    
    def wasm_draw_particle(self, x: float, y: float, a: float) -> None: # [(0, 'f64'), (1, 'f64'), (2, 'f64')] -> []
        self._painter.setBrush(QtGui.QColor('#f04'))
        rect = QRectF(x, y, REL_SIZE, REL_SIZE)
        self._painter.drawEllipse(rect)
    
    def wasm_draw_player(self, x: float, y: float, a: float) -> None:  # [(0, 'f64'), (1, 'f64'), (2, 'f64')] -> []
        p = QtGui.QPainterPath()
        self._painter.save()
        self._painter.translate(x, y)
        self._painter.rotate(a*180/math.pi-90)
        self._painter.translate(-x, -y)
        p.moveTo(x, y + 12*REL_SIZE)
        p.lineTo(x - 6*REL_SIZE, y - 6*REL_SIZE)
        p.lineTo(x + 6*REL_SIZE, y - 6*REL_SIZE)
        p.lineTo(x, y + 12*REL_SIZE)
        self._painter.fillPath(p, QtGui.QBrush(QtGui.QColor("#00f")))
        self._painter.restore()
    
    def wasm_draw_score(self, score: float) -> None:  #  env.draw_score:    [(0, 'f64')] -> []
        score = int(score)
        self._highscore = max(self._highscore, score)
        self._painter.drawText(0, 20, f'Score: {score}, HighScore: {self._highscore}')


if __name__ == '__main__':
    game = QtRocketGame()
    game.run()
